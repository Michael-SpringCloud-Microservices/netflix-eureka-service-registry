spring.application.name=netflix-eureka-service-registry
server.port=8761
eureka.client.register-with-eureka=false
eureka.client.fetch-registry=false


#Self-preservation is a feature where Eureka servers stop expiring instances from the registry when they do not receive heartbeats (from peers and client microservices) beyond a certain threshold.
eureka.server.enableSelfPreservation=false


#Indicates the frequency the client sends heartbeats to server to indicate that it is still alive. It\u2019s not advisable to change this value since self-preservation assumes that heartbeats are always received at intervals of 30 seconds
eureka.instance.lease-renewal-interval-in-seconds=30


#Indicates the duration the server waits since it received the last heartbeat before it can evict an instance from its registry. This value should be greater than lease-renewal-interval-in-seconds
eureka.instance.lease-expiration-duration-in-seconds=90


#A scheduler is run at this frequency which will evict instances from the registry if the lease of the instances are expired as configured by lease-expiration-duration-in-seconds. 
#Setting this value too long will delay the system entering into self-preservation mode. 1 minute = 60000 milli seconds
eureka.server.eviction-interval-timer-in-ms=60000


#This value is used to calculate the expected heartbeats per minute (N * 2 * 0.85). N stands for number of instances
#And 2 means there should be 2 heart beats from each instances per minutes (as renewal interval is 30 seconds)
eureka.server.renewal-percent-threshold=0.85

# A scheduler is run at this frequency which calculates the expected heartbeats per minute. This runs once at every 15 minutes (9 Lac milli seconds)
eureka.server.renewal-threshold-update-interval-ms=900000


